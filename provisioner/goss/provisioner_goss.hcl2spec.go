// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package goss

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	Installation *FlatInstallation `mapstructure:"installation" required:"false" cty:"installation" hcl:"installation"`
	Validate     *FlatValidate     `mapstructrue:"validate" cty:"validate" hcl:"validate"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"installation": &hcldec.BlockSpec{TypeName: "installation", Nested: hcldec.ObjectSpec((*FlatInstallation)(nil).HCL2Spec())},
		"validate":     &hcldec.BlockSpec{TypeName: "validate", Nested: hcldec.ObjectSpec((*FlatValidate)(nil).HCL2Spec())},
	}
	return s
}

// FlatInstallation is an auto-generated flat version of Installation.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatInstallation struct {
	UseSudo          *bool             `mapstructure:"use_sudo" cty:"use_sudo" hcl:"use_sudo"`
	Version          *string           `mapstructure:"version" cty:"version" hcl:"version"`
	Arch             *string           `mapstructure:"arch" cty:"arch" hcl:"arch"`
	OS               *string           `mapstructure:"os" cty:"os" hcl:"os"`
	URL              *string           `mapstructure:"url" cty:"url" hcl:"url"`
	SkipSSL          *bool             `mapstructure:"skip_ssl" cty:"skip_ssl" hcl:"skip_ssl"`
	DownloadPath     *string           `mapstructure:"download_path" cty:"download_path" hcl:"download_path"`
	Username         *string           `mapstructure:"username" cty:"username" hcl:"username"`
	Password         *string           `mapstructure:"password" cty:"password" hcl:"password"`
	EnvVars          map[string]string `mapstructure:"env_vars" cty:"env_vars" hcl:"env_vars"`
	SkipInstallation *bool             `mapstructure:"skip_installation" cty:"skip_installation" hcl:"skip_installation"`
}

// FlatMapstructure returns a new FlatInstallation.
// FlatInstallation is an auto-generated flat version of Installation.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Installation) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatInstallation)
}

// HCL2Spec returns the hcl spec of a Installation.
// This spec is used by HCL to read the fields of Installation.
// The decoded values from this spec will then be applied to a FlatInstallation.
func (*FlatInstallation) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"use_sudo":          &hcldec.AttrSpec{Name: "use_sudo", Type: cty.Bool, Required: false},
		"version":           &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"arch":              &hcldec.AttrSpec{Name: "arch", Type: cty.String, Required: false},
		"os":                &hcldec.AttrSpec{Name: "os", Type: cty.String, Required: false},
		"url":               &hcldec.AttrSpec{Name: "url", Type: cty.String, Required: false},
		"skip_ssl":          &hcldec.AttrSpec{Name: "skip_ssl", Type: cty.Bool, Required: false},
		"download_path":     &hcldec.AttrSpec{Name: "download_path", Type: cty.String, Required: false},
		"username":          &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"password":          &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"env_vars":          &hcldec.AttrSpec{Name: "env_vars", Type: cty.Map(cty.String), Required: false},
		"skip_installation": &hcldec.AttrSpec{Name: "skip_installation", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatValidate is an auto-generated flat version of Validate.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatValidate struct {
	UseSudo       *bool             `mapstructure:"use_sudo" cty:"use_sudo" hcl:"use_sudo"`
	GossFile      *string           `mapstructure:"goss_file" cty:"goss_file" hcl:"goss_file"`
	VarsFile      *string           `mapstructure:"vars_file" cty:"vars_file" hcl:"vars_file"`
	VarsInline    map[string]string `mapstructure:"vars_inline" cty:"vars_inline" hcl:"vars_inline"`
	Package       *string           `mapstructure:"package" cty:"package" hcl:"package"`
	Loglevel      *string           `mapstructure:"log_level" cty:"log_level" hcl:"log_level"`
	RetryTimeout  *string           `mapstructure:"retry_timeout" cty:"retry_timeout" hcl:"retry_timeout"`
	Sleep         *string           `mapstructure:"sleep" cty:"sleep" hcl:"sleep"`
	Format        *string           `mapstructure:"format" cty:"format" hcl:"format"`
	OutputFile    *string           `mapstructure:"output_file" cty:"output_file" hcl:"output_file"`
	FormatOptions *string           `mapstructure:"format_options" cty:"format_options" hcl:"format_options"`
	EnvVars       map[string]string `mapstructure:"env_vars" cty:"env_vars" hcl:"env_vars"`
}

// FlatMapstructure returns a new FlatValidate.
// FlatValidate is an auto-generated flat version of Validate.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Validate) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatValidate)
}

// HCL2Spec returns the hcl spec of a Validate.
// This spec is used by HCL to read the fields of Validate.
// The decoded values from this spec will then be applied to a FlatValidate.
func (*FlatValidate) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"use_sudo":       &hcldec.AttrSpec{Name: "use_sudo", Type: cty.Bool, Required: false},
		"goss_file":      &hcldec.AttrSpec{Name: "goss_file", Type: cty.String, Required: false},
		"vars_file":      &hcldec.AttrSpec{Name: "vars_file", Type: cty.String, Required: false},
		"vars_inline":    &hcldec.AttrSpec{Name: "vars_inline", Type: cty.Map(cty.String), Required: false},
		"package":        &hcldec.AttrSpec{Name: "package", Type: cty.String, Required: false},
		"log_level":      &hcldec.AttrSpec{Name: "log_level", Type: cty.String, Required: false},
		"retry_timeout":  &hcldec.AttrSpec{Name: "retry_timeout", Type: cty.String, Required: false},
		"sleep":          &hcldec.AttrSpec{Name: "sleep", Type: cty.String, Required: false},
		"format":         &hcldec.AttrSpec{Name: "format", Type: cty.String, Required: false},
		"output_file":    &hcldec.AttrSpec{Name: "output_file", Type: cty.String, Required: false},
		"format_options": &hcldec.AttrSpec{Name: "format_options", Type: cty.String, Required: false},
		"env_vars":       &hcldec.AttrSpec{Name: "env_vars", Type: cty.Map(cty.String), Required: false},
	}
	return s
}
